/**
 * Series Navigator Module
 * T√≠nh nƒÉng li√™n k·∫øt gi·ªØa c√°c ph·∫ßn c·ªßa c√πng m·ªôt b·ªô phim
 * 
 * Ch·ª©c nƒÉng:
 * - Nh·∫≠n di·ªán v√† nh√≥m c√°c ph·∫ßn phim c√πng series
 * - T·∫°o UI navigator ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa c√°c ph·∫ßn
 * - T√≠ch h·ª£p v√†o trang chi ti·∫øt v√† xem phim
 */

// Import functions from main app
// Note: These will be available globally when the module is imported

console.log('üöÄ Series Navigator Module Loading...');

/**
 * MANUAL/HARDCODED Season Number Extractor
 * Directly extracts season numbers using simple string operations
 * @param {Object} movie - Movie object
 * @returns {Object|null} Series info ho·∫∑c null n·∫øu kh√¥ng ph·∫£i series
 */
export function getSeriesBaseInfo(movie) {
  if (!movie || !movie.name) {
    console.log('‚ùå MANUAL: Invalid movie or name:', movie);
    return null;
  }

  const movieName = movie.name.trim();
  console.log('üîß MANUAL: Processing movie name:', movieName);

  // HARDCODED REGEX PATTERNS - Tested and explicit
  const patterns = [
    // Pattern 1: "T√™n Phim (Ph·∫ßn X)"
    /^(.+?)\s*\(\s*Ph·∫ßn\s*(\d+)\s*\)$/i,
    // Pattern 2: "T√™n Phim (Season X)"
    /^(.+?)\s*\(\s*Season\s*(\d+)\s*\)$/i,
    // Pattern 3: "T√™n Phim - Ph·∫ßn X"
    /^(.+?)\s*-\s*Ph·∫ßn\s*(\d+)$/i,
    // Pattern 4: "T√™n Phim - Season X"
    /^(.+?)\s*-\s*Season\s*(\d+)$/i
  ];

  // Try each pattern manually
  for (let i = 0; i < patterns.length; i++) {
    const pattern = patterns[i];
    const match = movieName.match(pattern);

    console.log(`üéØ MANUAL: Pattern ${i + 1} test:`, {
      pattern: pattern.toString(),
      match: match
    });

    if (match && match.length >= 3) {
      const baseName = match[1].trim();
      const seasonNumber = parseInt(match[2]);

      // Create completely new object with no references
      const result = {
        seriesId: baseName + '_SERIES', // Unique identifier
        season: seasonNumber,
        method: 'manual_pattern_' + (i + 1),
        baseName: baseName,
        // Add timestamp to ensure uniqueness
        _timestamp: Date.now(),
        _movieSlug: movie.slug
      };

      console.log('‚úÖ MANUAL: Success with pattern', i + 1, ':', result);
      return result;
    }
  }

  // FALLBACK: Check origin_name with manual approach
  if (movie.origin_name) {
    console.log('üåê MANUAL: Checking origin_name:', movie.origin_name);

    const originPatterns = [
      /^(.+?)\s*\(\s*Season\s*(\d+)\s*\)$/i,
      /^(.+?)\s*Season\s*(\d+)$/i
    ];

    for (let i = 0; i < originPatterns.length; i++) {
      const match = movie.origin_name.match(originPatterns[i]);
      if (match && match.length >= 3) {
        const result = {
          seriesId: match[1].trim() + '_ORIGIN_SERIES',
          season: parseInt(match[2]),
          method: 'manual_origin_' + (i + 1),
          baseName: match[1].trim(),
          _timestamp: Date.now(),
          _movieSlug: movie.slug
        };

        console.log('‚úÖ MANUAL: Origin success:', result);
        return result;
      }
    }
  }

  console.log('‚ùå MANUAL: No pattern matched for:', movieName);
  return null;
}

/**
 * T√¨m c√°c ph·∫ßn li√™n quan c·ªßa c√πng series
 * @param {Object} currentMovie - Movie hi·ªán t·∫°i
 * @param {Object} api - Api instance
 * @param {Function} extractItems - Function to extract items from API response
 * @returns {Array} Danh s√°ch c√°c ph·∫ßn li√™n quan, ƒë√£ s·∫Øp x·∫øp theo season
 */
export async function findRelatedSeasons(currentMovie, api = null, extractItems = null) {
  const seriesInfo = getSeriesBaseInfo(currentMovie);
  if (!seriesInfo) {
    console.debug('Movie is not part of a series:', currentMovie.name);
    return [];
  }

  console.debug('Finding related seasons for:', seriesInfo);

  try {
    // T√¨m ki·∫øm b·∫±ng t√™n series
    const searchKeyword = seriesInfo.baseName;

    // Use passed dependencies or fallback to window globals
    const apiInstance = api || window.Api;
    const extractItemsFunc = extractItems || window.extractItems;

    if (!apiInstance || !extractItemsFunc) {
      console.warn('Api or extractItems not available');
      return [];
    }

    const searchData = await apiInstance.search({
      keyword: searchKeyword,
      limit: 50 // TƒÉng limit ƒë·ªÉ t√¨m ƒë·ªß c√°c ph·∫ßn
    });

    const items = extractItemsFunc(searchData);
    if (!items || items.length === 0) {
      console.debug('No search results found for:', searchKeyword);
      return [];
    }

    // L·ªçc v√† ph√¢n t√≠ch c√°c k·∫øt qu·∫£
    console.log('üîç Starting to analyze', items.length, 'movies for series:', searchKeyword);

    // MANUAL APPROACH: Process each movie individually with no shared references
    const relatedSeasons = [];

    for (let i = 0; i < items.length; i++) {
      const movie = items[i];
      console.log(`üîß MANUAL: Processing movie ${i + 1}/${items.length}:`, movie.name);

      // Get series info using manual approach
      const seriesInfo = getSeriesBaseInfo(movie);

      if (seriesInfo) {
        // Create completely isolated object with manual property assignment
        const isolatedMovie = {
          // Copy basic movie properties manually
          name: movie.name,
          slug: movie.slug,
          origin_name: movie.origin_name,
          year: movie.year,
          episode_current: movie.episode_current,
          poster_url: movie.poster_url,

          // Create completely new seriesInfo object with manual assignment
          seriesInfo: {
            seriesId: String(seriesInfo.seriesId), // Force string conversion
            season: Number(seriesInfo.season),     // Force number conversion
            method: String(seriesInfo.method),
            baseName: String(seriesInfo.baseName),
            _uniqueId: `${movie.slug}_${seriesInfo.season}_${Date.now()}_${Math.random()}` // Unique ID
          }
        };

        console.log(`‚úÖ MANUAL: Created isolated object for ${movie.name}:`, {
          name: isolatedMovie.name,
          seasonNumber: isolatedMovie.seriesInfo.season,
          uniqueId: isolatedMovie.seriesInfo._uniqueId
        });

        relatedSeasons.push(isolatedMovie);
      } else {
        console.log(`‚ùå MANUAL: No series info for ${movie.name}`);
      }
    }

    console.log(`üé¨ MANUAL: Total processed movies: ${relatedSeasons.length}`);

    // MANUAL FILTERING: Compare base names directly
    const currentSeriesInfo = getSeriesBaseInfo(currentMovie);
    if (!currentSeriesInfo) {
      console.log('‚ùå MANUAL: Current movie has no series info');
      return [];
    }

    console.log('üîç MANUAL: Current series info:', currentSeriesInfo);

    const filteredSeasons = [];
    for (let i = 0; i < relatedSeasons.length; i++) {
      const movie = relatedSeasons[i];

      // MANUAL COMPARISON: Direct string comparison of base names
      const currentBaseName = currentSeriesInfo.baseName.toLowerCase().trim();
      const movieBaseName = movie.seriesInfo.baseName.toLowerCase().trim();

      console.log(`üîç MANUAL: Comparing "${currentBaseName}" vs "${movieBaseName}"`);

      if (currentBaseName === movieBaseName) {
        console.log(`‚úÖ MANUAL: Match found for ${movie.name} (Season ${movie.seriesInfo.season})`);
        filteredSeasons.push(movie);
      } else {
        console.log(`‚ùå MANUAL: No match for ${movie.name}`);
      }
    }

    // MANUAL SORTING: Sort by season number
    filteredSeasons.sort((a, b) => {
      const seasonA = Number(a.seriesInfo.season);
      const seasonB = Number(b.seriesInfo.season);
      console.log(`üî¢ MANUAL: Sorting ${a.name} (${seasonA}) vs ${b.name} (${seasonB})`);
      return seasonA - seasonB;
    });

    console.log(`üé¨ MANUAL: Final filtered seasons: ${filteredSeasons.length}`);
    filteredSeasons.forEach((season, index) => {
      console.log(`üìã MANUAL: Season ${index + 1}: ${season.name} (Ph·∫ßn ${season.seriesInfo.season})`);
    });

    return filteredSeasons;

  } catch (error) {
    console.error('Error finding related seasons:', error);
    return [];
  }
}

/**
 * T·∫°o UI component navigator cho series
 * @param {Object} currentMovie - Movie hi·ªán t·∫°i
 * @param {Array} relatedSeasons - Danh s√°ch c√°c ph·∫ßn li√™n quan
 * @param {Function} createEl - Function to create DOM elements
 * @returns {HTMLElement|null} Navigator element ho·∫∑c null n·∫øu ch·ªâ c√≥ 1 ph·∫ßn
 */
export function createSeriesNavigator(currentMovie, relatedSeasons, createEl = null) {
  // Ch·ªâ hi·ªÉn th·ªã khi c√≥ t·ª´ 2 ph·∫ßn tr·ªü l√™n
  if (!relatedSeasons || relatedSeasons.length <= 1) {
    console.debug('Not enough seasons to show navigator');
    return null;
  }

  // Use passed createEl or fallback to window global
  const createElement = createEl || window.createEl;
  if (!createElement) {
    console.warn('createEl function not available');
    return null;
  }

  const navigator = createElement('div', 'series-navigator');

  // Header v·ªõi title v√† refresh button
  const header = createElement('div', 'series-navigator__header');

  // Title
  const title = createElement('h3', 'series-navigator__title', 'üé¨ C√°c ph·∫ßn trong series');
  header.appendChild(title);

  // Refresh button
  const refreshBtn = createElement('button', 'series-navigator__refresh-btn', 'üîÑ');
  refreshBtn.title = 'Ki·ªÉm tra ph·∫ßn m·ªõi';
  refreshBtn.addEventListener('click', async () => {
    refreshBtn.disabled = true;
    refreshBtn.textContent = '‚è≥';

    try {
      // Force refresh related seasons
      const api = window.Api;
      const extractItems = window.extractItems;
      const newSeasons = await getCachedRelatedSeasons(currentMovie, api, extractItems, true);

      // Re-render navigator
      const newNavigator = createSeriesNavigator(currentMovie, newSeasons, createElement);
      if (newNavigator && navigator.parentNode) {
        navigator.parentNode.replaceChild(newNavigator, navigator);
      }

      // Show notification
      if (window.showNotification) {
        window.showNotification({
          message: '‚úÖ ƒê√£ c·∫≠p nh·∫≠t danh s√°ch ph·∫ßn phim',
          timestamp: new Date().toISOString()
        });
      }
    } catch (error) {
      console.error('Error refreshing series:', error);
      if (window.showNotification) {
        window.showNotification({
          message: '‚ùå L·ªói khi c·∫≠p nh·∫≠t: ' + error.message,
          timestamp: new Date().toISOString()
        });
      }
    } finally {
      refreshBtn.disabled = false;
      refreshBtn.textContent = 'üîÑ';
    }
  });

  header.appendChild(refreshBtn);
  navigator.appendChild(header);

  // Series name
  const currentSeriesInfo = getSeriesBaseInfo(currentMovie);
  if (currentSeriesInfo?.baseName) {
    const seriesName = createElement('div', 'series-navigator__series-name', currentSeriesInfo.baseName);
    navigator.appendChild(seriesName);
  }

  // List container
  const list = createElement('div', 'series-navigator__list');
  
  console.log('üé¨ Creating navigator with', relatedSeasons.length, 'seasons');

  // MANUAL UI RENDERING: Process each season individually
  for (let i = 0; i < relatedSeasons.length; i++) {
    const season = relatedSeasons[i];

    // MANUAL SEASON NUMBER EXTRACTION: Direct from object
    const seasonNum = Number(season.seriesInfo.season);
    const movieName = String(season.name);
    const movieSlug = String(season.slug);

    console.log(`üé≠ MANUAL RENDER ${i + 1}/${relatedSeasons.length}:`, {
      name: movieName,
      seasonNumber: seasonNum,
      slug: movieSlug,
      uniqueId: season.seriesInfo._uniqueId
    });

    // Create UI elements manually
    const item = createElement('div', 'series-navigator__item');
    const isCurrent = movieSlug === currentMovie.slug;

    if (isCurrent) {
      item.classList.add('series-navigator__item--current');
      console.log(`üéØ MANUAL: Marking ${movieName} as current`);
    }

    // Link element
    const link = createElement('a', 'series-navigator__link');
    link.href = `#/phim/${movieSlug}`;

    // MANUAL SEASON NUMBER DISPLAY: Direct string creation
    const seasonNumber = createElement('div', 'series-navigator__season');
    const seasonText = `Ph·∫ßn ${seasonNum}`;
    seasonNumber.textContent = seasonText;

    console.log(`üè∑Ô∏è MANUAL: Setting text "${seasonText}" for ${movieName}`);

    link.appendChild(seasonNumber);

    // Episode info
    if (season.episode_current) {
      const episodeInfo = createElement('div', 'series-navigator__episode');
      episodeInfo.textContent = season.episode_current;
      link.appendChild(episodeInfo);
    }

    // Year info
    if (season.year) {
      const yearInfo = createElement('div', 'series-navigator__year');
      yearInfo.textContent = season.year;
      link.appendChild(yearInfo);
    }

    // Current indicator
    if (isCurrent) {
      const currentIndicator = createElement('div', 'series-navigator__current-indicator');
      currentIndicator.textContent = '‚óè ƒêang xem';
      link.appendChild(currentIndicator);
    }
    
    item.appendChild(link);
    list.appendChild(item);
  }

  navigator.appendChild(list);

  console.debug('Created series navigator with', relatedSeasons.length, 'seasons');
  return navigator;
}

/**
 * T·∫°o navigator cho trang xem phim (compact version)
 * @param {Object} currentMovie - Movie hi·ªán t·∫°i
 * @param {Array} relatedSeasons - Danh s√°ch c√°c ph·∫ßn li√™n quan
 * @param {Function} createEl - Function to create DOM elements
 * @returns {HTMLElement|null} Navigator element ho·∫∑c null
 */
export function createWatchSeriesNavigator(currentMovie, relatedSeasons, createEl = null) {
  if (!relatedSeasons || relatedSeasons.length <= 1) return null;

  // Use passed createEl or fallback to window global
  const createElement = createEl || window.createEl;
  if (!createElement) {
    console.warn('createEl function not available for watch navigator');
    return null;
  }

  const navigator = createElement('div', 'watch-series-navigator');

  const title = createElement('div', 'watch-series-navigator__title', 'C√°c ph·∫ßn kh√°c:');
  navigator.appendChild(title);

  const list = createElement('div', 'watch-series-navigator__list');
  
  relatedSeasons.forEach(season => {
    const isCurrent = season.slug === currentMovie.slug;
    if (isCurrent) return; // Kh√¥ng hi·ªÉn th·ªã ph·∫ßn hi·ªán t·∫°i trong watch page

    const item = createElement('a', 'watch-series-navigator__item');
    item.href = `#/phim/${season.slug}`;
    item.textContent = `Ph·∫ßn ${season.seriesInfo.season}`;

    if (season.episode_current) {
      item.title = `${season.name} - ${season.episode_current}`;
    }

    list.appendChild(item);
  });
  
  if (list.children.length > 0) {
    navigator.appendChild(list);
    return navigator;
  }
  
  return null;
}

/**
 * Cache cho related seasons ƒë·ªÉ tr√°nh g·ªçi API nhi·ªÅu l·∫ßn
 */
const relatedSeasonsCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t

/**
 * Enhanced cache v·ªõi smart invalidation
 * @param {string} cacheKey - Cache key
 * @param {boolean} forceRefresh - Force refresh cache
 * @returns {Object|null} Cached data ho·∫∑c null
 */
function getSmartCache(cacheKey, forceRefresh = false) {
  if (forceRefresh) {
    relatedSeasonsCache.delete(cacheKey);
    return null;
  }

  const cached = relatedSeasonsCache.get(cacheKey);
  if (!cached) return null;

  // Check cache expiry
  if (Date.now() - cached.timestamp < CACHE_DURATION) {
    return cached;
  }

  // Cache expired
  relatedSeasonsCache.delete(cacheKey);
  return null;
}

/**
 * L·∫•y related seasons v·ªõi caching v√† auto-update support
 * @param {Object} currentMovie - Movie hi·ªán t·∫°i
 * @param {Object} api - Api instance
 * @param {Function} extractItems - Function to extract items from API response
 * @param {boolean} forceRefresh - Force refresh t·ª´ API
 * @returns {Array} Cached ho·∫∑c fresh data
 */
export async function getCachedRelatedSeasons(currentMovie, api = null, extractItems = null, forceRefresh = false) {
  console.log('üöÄ getCachedRelatedSeasons called for:', currentMovie.name, forceRefresh ? '(force refresh)' : '');

  const cacheKey = currentMovie.slug;
  const cached = getSmartCache(cacheKey, forceRefresh);

  if (cached && !forceRefresh) {
    console.log('üíæ Using cached related seasons for:', currentMovie.name);
    return cached.data;
  }

  const relatedSeasons = await findRelatedSeasons(currentMovie, api, extractItems);
  relatedSeasonsCache.set(cacheKey, {
    data: relatedSeasons,
    timestamp: Date.now()
  });

  // Auto-track series n·∫øu c√≥ Series Update Manager
  try {
    const seriesInfo = getSeriesBaseInfo(currentMovie);
    if (seriesInfo && window.seriesUpdateManager) {
      window.seriesUpdateManager.trackSeries(seriesInfo, currentMovie, async (newSeasons) => {
        // Callback khi c√≥ update - invalidate cache
        console.log('üîÑ Series updated, invalidating cache for:', currentMovie.name);
        relatedSeasonsCache.delete(cacheKey);

        // Trigger UI update event
        const event = new CustomEvent('seriesNavigatorUpdate', {
          detail: { currentMovie, newSeasons }
        });
        window.dispatchEvent(event);
      });
    }
  } catch (error) {
    console.warn('Could not setup auto-tracking:', error);
  }

  return relatedSeasons;
}
