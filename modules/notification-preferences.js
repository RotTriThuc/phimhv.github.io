/**
 * üîî Notification Preferences System
 * Qu·∫£n l√Ω preferences th√¥ng b√°o c·ªßa user
 * 
 * Features:
 * - ƒêƒÉng k√Ω/h·ªßy ƒëƒÉng k√Ω th√¥ng b√°o theo th·ªÉ lo·∫°i
 * - Qu·∫£n l√Ω preferences cho phim m·ªõi/t·∫≠p m·ªõi
 * - L·ªçc th√¥ng b√°o theo s·ªü th√≠ch user
 * - Sync v·ªõi Firebase
 */

import { FirebaseLogger } from '../firebase-config.js';

export class NotificationPreferencesManager {
  constructor() {
    this.preferences = {
      enableNewMovies: true,
      enableNewEpisodes: true,
      categories: [], // Th·ªÉ lo·∫°i quan t√¢m
      countries: [], // Qu·ªëc gia quan t√¢m
      languages: ['Vietsub', 'Thuy·∫øt minh'], // Ng√¥n ng·ªØ quan t√¢m
      qualities: ['HD', 'FHD', '4K'], // Ch·∫•t l∆∞·ª£ng quan t√¢m
      notificationTypes: {
        newMovie: true,
        newEpisode: true,
        adminAnnouncement: true
      }
    };
    this.isInitialized = false;
    this.userId = null;
  }

  /**
   * Kh·ªüi t·∫°o h·ªá th·ªëng preferences
   */
  async init() {
    try {
      // ƒê·∫£m b·∫£o Firebase ƒë√£ s·∫µn s√†ng
      if (!window.movieComments || !window.movieComments.initialized) {
        await window.movieComments?.init();
      }

      this.userId = await window.movieComments?.getUserId();
      
      // Load preferences t·ª´ Firebase ho·∫∑c localStorage
      await this.loadPreferences();
      
      this.isInitialized = true;
      FirebaseLogger.info('üîî Notification Preferences Manager initialized');
      
      return true;
    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to initialize Notification Preferences Manager:', error);
      return false;
    }
  }

  /**
   * Load preferences t·ª´ Firebase v·ªõi fallback localStorage
   */
  async loadPreferences() {
    try {
      // Th·ª≠ load t·ª´ Firebase tr∆∞·ªõc
      const firebasePrefs = await this.loadFromFirebase();
      if (firebasePrefs) {
        this.preferences = { ...this.preferences, ...firebasePrefs };
        FirebaseLogger.debug('üì• Loaded preferences from Firebase');
        return;
      }

      // Fallback: load t·ª´ localStorage
      const localPrefs = this.loadFromLocalStorage();
      if (localPrefs) {
        this.preferences = { ...this.preferences, ...localPrefs };
        FirebaseLogger.debug('üì• Loaded preferences from localStorage');
      }

    } catch (error) {
      FirebaseLogger.warn('‚ö†Ô∏è Failed to load preferences:', error);
    }
  }

  /**
   * Load preferences t·ª´ Firebase
   */
  async loadFromFirebase() {
    try {
      if (!window.movieComments?.db || !this.userId) return null;

      const doc = await window.movieComments.db
        .collection('notificationPreferences')
        .doc(this.userId)
        .get();

      if (doc.exists) {
        return doc.data().preferences;
      }
      return null;

    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to load from Firebase:', error);
      return null;
    }
  }

  /**
   * Load preferences t·ª´ localStorage
   */
  loadFromLocalStorage() {
    try {
      const stored = localStorage.getItem('notificationPreferences');
      return stored ? JSON.parse(stored) : null;
    } catch (error) {
      FirebaseLogger.warn('‚ö†Ô∏è Failed to load from localStorage:', error);
      return null;
    }
  }

  /**
   * L∆∞u preferences
   */
  async savePreferences() {
    try {
      // L∆∞u v√†o Firebase
      await this.saveToFirebase();
      
      // Backup v√†o localStorage
      this.saveToLocalStorage();
      
      FirebaseLogger.info('üíæ Preferences saved successfully');
      
    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to save preferences:', error);
    }
  }

  /**
   * L∆∞u v√†o Firebase
   */
  async saveToFirebase() {
    try {
      if (!window.movieComments?.db || !this.userId) return;

      const data = {
        userId: this.userId,
        preferences: this.preferences,
        updatedAt: new Date(),
        version: '1.0'
      };

      await window.movieComments.db
        .collection('notificationPreferences')
        .doc(this.userId)
        .set(data, { merge: true });

    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to save to Firebase:', error);
    }
  }

  /**
   * L∆∞u v√†o localStorage
   */
  saveToLocalStorage() {
    try {
      localStorage.setItem('notificationPreferences', JSON.stringify(this.preferences));
    } catch (error) {
      FirebaseLogger.warn('‚ö†Ô∏è Failed to save to localStorage:', error);
    }
  }

  /**
   * C·∫≠p nh·∫≠t preference cho th·ªÉ lo·∫°i
   */
  async updateCategoryPreference(category, enabled) {
    if (!this.isInitialized) await this.init();

    try {
      if (enabled) {
        if (!this.preferences.categories.includes(category)) {
          this.preferences.categories.push(category);
        }
      } else {
        this.preferences.categories = this.preferences.categories.filter(c => c !== category);
      }

      await this.savePreferences();
      FirebaseLogger.debug(`üìù Updated category preference: ${category} = ${enabled}`);
      
    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to update category preference:', error);
    }
  }

  /**
   * C·∫≠p nh·∫≠t preference cho qu·ªëc gia
   */
  async updateCountryPreference(country, enabled) {
    if (!this.isInitialized) await this.init();

    try {
      if (enabled) {
        if (!this.preferences.countries.includes(country)) {
          this.preferences.countries.push(country);
        }
      } else {
        this.preferences.countries = this.preferences.countries.filter(c => c !== country);
      }

      await this.savePreferences();
      FirebaseLogger.debug(`üìù Updated country preference: ${country} = ${enabled}`);
      
    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to update country preference:', error);
    }
  }

  /**
   * C·∫≠p nh·∫≠t preference t·ªïng qu√°t
   */
  async updateGeneralPreference(key, value) {
    if (!this.isInitialized) await this.init();

    try {
      this.preferences[key] = value;
      await this.savePreferences();
      FirebaseLogger.debug(`üìù Updated general preference: ${key} = ${value}`);
      
    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to update general preference:', error);
    }
  }

  /**
   * Ki·ªÉm tra xem user c√≥ quan t√¢m ƒë·∫øn phim n√†y kh√¥ng
   */
  isInterestedInMovie(movie) {
    try {
      // Ki·ªÉm tra enable new movies
      if (!this.preferences.enableNewMovies) return false;

      // Ki·ªÉm tra th·ªÉ lo·∫°i
      if (this.preferences.categories.length > 0) {
        const movieCategories = movie.category || [];
        const hasMatchingCategory = movieCategories.some(cat => 
          this.preferences.categories.includes(cat.name || cat)
        );
        if (!hasMatchingCategory) return false;
      }

      // Ki·ªÉm tra qu·ªëc gia
      if (this.preferences.countries.length > 0) {
        const movieCountries = movie.country || [];
        const hasMatchingCountry = movieCountries.some(country => 
          this.preferences.countries.includes(country.name || country)
        );
        if (!hasMatchingCountry) return false;
      }

      // Ki·ªÉm tra ng√¥n ng·ªØ
      if (this.preferences.languages.length > 0) {
        const movieLang = movie.lang || '';
        if (!this.preferences.languages.includes(movieLang)) return false;
      }

      // Ki·ªÉm tra ch·∫•t l∆∞·ª£ng
      if (this.preferences.qualities.length > 0) {
        const movieQuality = movie.quality || '';
        if (!this.preferences.qualities.includes(movieQuality)) return false;
      }

      return true;

    } catch (error) {
      FirebaseLogger.error('‚ùå Error checking movie interest:', error);
      return true; // Default: quan t√¢m n·∫øu c√≥ l·ªói
    }
  }

  /**
   * Ki·ªÉm tra xem user c√≥ quan t√¢m ƒë·∫øn episode n√†y kh√¥ng
   */
  isInterestedInEpisode(movie) {
    try {
      // Ki·ªÉm tra enable new episodes
      if (!this.preferences.enableNewEpisodes) return false;

      // S·ª≠ d·ª•ng logic t∆∞∆°ng t·ª± nh∆∞ movie
      return this.isInterestedInMovie(movie);

    } catch (error) {
      FirebaseLogger.error('‚ùå Error checking episode interest:', error);
      return true; // Default: quan t√¢m n·∫øu c√≥ l·ªói
    }
  }

  /**
   * L·∫•y danh s√°ch th·ªÉ lo·∫°i ph·ªï bi·∫øn ƒë·ªÉ user ch·ªçn
   */
  getPopularCategories() {
    return [
      'H√†nh ƒê·ªông', 'Phi√™u L∆∞u', 'Ho·∫°t H√¨nh', 'H√†i H∆∞·ªõc', 'T√¨nh C·∫£m',
      'Kinh D·ªã', 'Khoa H·ªçc Vi·ªÖn T∆∞·ªüng', 'Th·ªÉ Thao', '√Çm Nh·∫°c', 'H·ªçc ƒê∆∞·ªùng',
      'Si√™u Nhi√™n', 'Mecha', 'Isekai', 'Slice of Life', 'Shounen',
      'Shoujo', 'Seinen', 'Josei', 'Ecchi', 'Harem'
    ];
  }

  /**
   * L·∫•y danh s√°ch qu·ªëc gia ph·ªï bi·∫øn
   */
  getPopularCountries() {
    return [
      'Nh·∫≠t B·∫£n', 'H√†n Qu·ªëc', 'Trung Qu·ªëc', 'Th√°i Lan', 'M·ªπ',
      'Anh', 'Ph√°p', 'ƒê·ª©c', 'Nga', '·∫§n ƒê·ªô'
    ];
  }

  /**
   * L·∫•y preferences hi·ªán t·∫°i
   */
  getPreferences() {
    return { ...this.preferences };
  }

  /**
   * Reset v·ªÅ m·∫∑c ƒë·ªãnh
   */
  async resetToDefault() {
    this.preferences = {
      enableNewMovies: true,
      enableNewEpisodes: true,
      categories: [],
      countries: [],
      languages: ['Vietsub', 'Thuy·∫øt minh'],
      qualities: ['HD', 'FHD', '4K'],
      notificationTypes: {
        newMovie: true,
        newEpisode: true,
        adminAnnouncement: true
      }
    };

    await this.savePreferences();
    FirebaseLogger.info('üîÑ Preferences reset to default');
  }

  /**
   * L·∫•y th·ªëng k√™ preferences
   */
  getStats() {
    return {
      categoriesCount: this.preferences.categories.length,
      countriesCount: this.preferences.countries.length,
      languagesCount: this.preferences.languages.length,
      qualitiesCount: this.preferences.qualities.length,
      enabledNotifications: Object.values(this.preferences.notificationTypes).filter(Boolean).length
    };
  }
}

// Kh·ªüi t·∫°o global instance
window.NotificationPreferencesManager = new NotificationPreferencesManager();

// Auto-init khi DOM ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.NotificationPreferencesManager.init();
  });
} else {
  window.NotificationPreferencesManager.init();
}

export default NotificationPreferencesManager;
