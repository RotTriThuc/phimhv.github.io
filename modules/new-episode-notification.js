/**
 * üì∫ New Episode Notification System
 * T·ª± ƒë·ªông ph√°t hi·ªán v√† t·∫°o th√¥ng b√°o cho t·∫≠p phim m·ªõi
 * 
 * Features:
 * - Theo d√µi episode_current c·ªßa c√°c phim
 * - Ph√°t hi·ªán khi c√≥ t·∫≠p m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 * - T·∫°o th√¥ng b√°o v·ªõi link tr·ª±c ti·∫øp ƒë·∫øn t·∫≠p m·ªõi
 * - L·ªçc theo phim y√™u th√≠ch c·ªßa user
 */

import { FirebaseLogger } from '../firebase-config.js';

export class NewEpisodeNotificationManager {
  constructor() {
    this.trackedMovies = new Map(); // slug -> episode info
    this.isInitialized = false;
    this.checkInterval = 10 * 60 * 1000; // 10 ph√∫t
    this.maxTrackedMovies = 500; // Gi·ªõi h·∫°n s·ªë phim theo d√µi
  }

  /**
   * Kh·ªüi t·∫°o h·ªá th·ªëng
   */
  async init() {
    try {
      // ƒê·∫£m b·∫£o Firebase ƒë√£ s·∫µn s√†ng
      if (!window.movieComments || !window.movieComments.initialized) {
        await window.movieComments?.init();
      }

      // Load danh s√°ch phim ƒëang theo d√µi
      await this.loadTrackedMovies();
      
      this.isInitialized = true;
      FirebaseLogger.info('üì∫ New Episode Notification Manager initialized');
      
      return true;
    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to initialize New Episode Notification Manager:', error);
      return false;
    }
  }

  /**
   * Load danh s√°ch phim ƒëang theo d√µi t·ª´ localStorage
   */
  async loadTrackedMovies() {
    try {
      const stored = localStorage.getItem('trackedMovies');
      if (stored) {
        const data = JSON.parse(stored);
        this.trackedMovies = new Map(Object.entries(data));
        FirebaseLogger.debug(`üìö Loaded ${this.trackedMovies.size} tracked movies`);
      }
    } catch (error) {
      FirebaseLogger.warn('‚ö†Ô∏è Failed to load tracked movies:', error);
      this.trackedMovies = new Map();
    }
  }

  /**
   * L∆∞u danh s√°ch phim ƒëang theo d√µi
   */
  async saveTrackedMovies() {
    try {
      const data = Object.fromEntries(this.trackedMovies);
      localStorage.setItem('trackedMovies', JSON.stringify(data));
      localStorage.setItem('lastEpisodeCheck', new Date().toISOString());
    } catch (error) {
      FirebaseLogger.warn('‚ö†Ô∏è Failed to save tracked movies:', error);
    }
  }

  /**
   * Th√™m phim v√†o danh s√°ch theo d√µi
   */
  async addMovieToTracking(movie) {
    try {
      const episodeInfo = {
        name: movie.name,
        slug: movie.slug,
        currentEpisode: movie.episode_current || 'T·∫≠p 1',
        lastChecked: new Date().toISOString(),
        poster_url: movie.poster_url || movie.thumb_url,
        year: movie.year,
        category: movie.category || [],
        quality: movie.quality,
        lang: movie.lang
      };

      this.trackedMovies.set(movie.slug, episodeInfo);
      
      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng phim theo d√µi
      if (this.trackedMovies.size > this.maxTrackedMovies) {
        await this.cleanupOldTrackedMovies();
      }
      
      await this.saveTrackedMovies();
      FirebaseLogger.debug(`‚ûï Added ${movie.name} to tracking`);
      
    } catch (error) {
      FirebaseLogger.error(`‚ùå Failed to add ${movie.name} to tracking:`, error);
    }
  }

  /**
   * D·ªçn d·∫πp phim c≈© kh√¥ng c√≤n c·∫≠p nh·∫≠t
   */
  async cleanupOldTrackedMovies() {
    const cutoffDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 ng√†y
    let removedCount = 0;

    for (const [slug, info] of this.trackedMovies.entries()) {
      const lastChecked = new Date(info.lastChecked);
      if (lastChecked < cutoffDate) {
        this.trackedMovies.delete(slug);
        removedCount++;
      }
    }

    if (removedCount > 0) {
      FirebaseLogger.info(`üßπ Cleaned up ${removedCount} old tracked movies`);
    }
  }

  /**
   * Ki·ªÉm tra t·∫≠p m·ªõi cho t·∫•t c·∫£ phim ƒëang theo d√µi
   */
  async checkForNewEpisodes() {
    if (!this.isInitialized) {
      await this.init();
    }

    try {
      FirebaseLogger.info('üîç Checking for new episodes...');
      
      const notifications = [];
      const batchSize = 10; // X·ª≠ l√Ω 10 phim m·ªói l·∫ßn
      const movieSlugs = Array.from(this.trackedMovies.keys());
      
      for (let i = 0; i < movieSlugs.length; i += batchSize) {
        const batch = movieSlugs.slice(i, i + batchSize);
        
        for (const slug of batch) {
          try {
            const notification = await this.checkSingleMovieEpisode(slug);
            if (notification) {
              notifications.push(notification);
            }
          } catch (error) {
            FirebaseLogger.error(`‚ùå Failed to check episode for ${slug}:`, error);
          }
        }
        
        // Delay gi·ªØa c√°c batch ƒë·ªÉ tr√°nh rate limit
        if (i + batchSize < movieSlugs.length) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
      
      if (notifications.length > 0) {
        FirebaseLogger.info(`üì∫ Found ${notifications.length} new episodes`);
      } else {
        FirebaseLogger.info('üì≠ No new episodes detected');
      }
      
      return notifications;
      
    } catch (error) {
      FirebaseLogger.error('‚ùå Error checking for new episodes:', error);
      return [];
    }
  }

  /**
   * Ki·ªÉm tra t·∫≠p m·ªõi cho m·ªôt phim c·ª• th·ªÉ
   */
  async checkSingleMovieEpisode(slug) {
    try {
      const trackedInfo = this.trackedMovies.get(slug);
      if (!trackedInfo) {
        return null;
      }

      // L·∫•y th√¥ng tin phim m·ªõi nh·∫•t t·ª´ API
      const movieData = await this.fetchMovieDetails(slug);
      if (!movieData) {
        return null;
      }

      // So s√°nh episode hi·ªán t·∫°i
      const currentEpisode = movieData.episode_current || 'T·∫≠p 1';
      const trackedEpisode = trackedInfo.currentEpisode;

      if (currentEpisode !== trackedEpisode) {
        // C√≥ t·∫≠p m·ªõi!
        FirebaseLogger.info(`üì∫ New episode detected for ${movieData.name}: ${currentEpisode}`);
        
        // C·∫≠p nh·∫≠t th√¥ng tin tracking
        trackedInfo.currentEpisode = currentEpisode;
        trackedInfo.lastChecked = new Date().toISOString();
        this.trackedMovies.set(slug, trackedInfo);
        
        // T·∫°o th√¥ng b√°o
        const notification = await this.createEpisodeNotification(movieData, currentEpisode);
        
        await this.saveTrackedMovies();
        return notification;
      }

      // C·∫≠p nh·∫≠t th·ªùi gian check
      trackedInfo.lastChecked = new Date().toISOString();
      this.trackedMovies.set(slug, trackedInfo);
      
      return null;
      
    } catch (error) {
      FirebaseLogger.error(`‚ùå Error checking episode for ${slug}:`, error);
      return null;
    }
  }

  /**
   * L·∫•y chi ti·∫øt phim t·ª´ API
   */
  async fetchMovieDetails(slug) {
    try {
      // S·ª≠ d·ª•ng API module hi·ªán c√≥
      if (window.api) {
        const response = await window.api.getMovie(slug);
        return response?.movie || response?.data || null;
      }
      
      // Fallback: g·ªçi API tr·ª±c ti·∫øp
      const response = await fetch(`https://phimapi.com/phim/${slug}`);
      const data = await response.json();
      return data?.movie || data?.data || null;
      
    } catch (error) {
      FirebaseLogger.error(`‚ùå Failed to fetch movie details for ${slug}:`, error);
      return null;
    }
  }

  /**
   * T·∫°o th√¥ng b√°o cho t·∫≠p m·ªõi
   */
  async createEpisodeNotification(movie, newEpisode) {
    try {
      const notificationData = {
        title: `üì∫ ${movie.name} - ${newEpisode}`,
        content: this.generateEpisodeNotificationContent(movie, newEpisode),
        type: 'new_episode',
        metadata: {
          priority: 'normal',
          movieSlug: movie.slug,
          episodeNumber: this.extractEpisodeNumber(newEpisode),
          movieData: {
            name: movie.name,
            slug: movie.slug,
            poster_url: movie.poster_url || movie.thumb_url,
            episode_current: newEpisode,
            quality: movie.quality,
            lang: movie.lang,
            watchUrl: `/xem/${movie.slug}`
          }
        }
      };

      // T·∫°o th√¥ng b√°o qua Firebase
      await window.movieComments.createNotification(notificationData);
      
      FirebaseLogger.success(`‚úÖ Created episode notification: ${movie.name} - ${newEpisode}`);
      return notificationData;
      
    } catch (error) {
      FirebaseLogger.error(`‚ùå Failed to create episode notification:`, error);
      return null;
    }
  }

  /**
   * T·∫°o n·ªôi dung th√¥ng b√°o cho t·∫≠p m·ªõi
   */
  generateEpisodeNotificationContent(movie, newEpisode) {
    const parts = [];
    
    parts.push(`${newEpisode} c·ªßa "${movie.name}" ƒë√£ c√≥ s·∫µn!`);
    
    // Ch·∫•t l∆∞·ª£ng v√† ng√¥n ng·ªØ
    if (movie.quality && movie.lang) {
      parts.push(`${movie.quality} - ${movie.lang}`);
    }
    
    parts.push('Xem ngay!');
    
    return parts.join(' ‚Ä¢ ');
  }

  /**
   * Tr√≠ch xu·∫•t s·ªë t·∫≠p t·ª´ chu·ªói episode
   */
  extractEpisodeNumber(episodeString) {
    const match = episodeString.match(/(\d+)/);
    return match ? parseInt(match[1]) : 1;
  }

  /**
   * T·ª± ƒë·ªông th√™m phim y√™u th√≠ch v√†o tracking
   */
  async syncWithSavedMovies() {
    try {
      // L·∫•y danh s√°ch phim ƒë√£ l∆∞u
      const savedMovies = await window.movieComments?.getSavedMovies() || [];
      
      for (const movie of savedMovies) {
        if (!this.trackedMovies.has(movie.slug)) {
          await this.addMovieToTracking(movie);
        }
      }
      
      FirebaseLogger.info(`üîÑ Synced ${savedMovies.length} saved movies to tracking`);
      
    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to sync with saved movies:', error);
    }
  }

  /**
   * B·∫Øt ƒë·∫ßu auto-check ƒë·ªãnh k·ª≥
   */
  startAutoCheck() {
    if (this.autoCheckInterval) {
      clearInterval(this.autoCheckInterval);
    }
    
    this.autoCheckInterval = setInterval(async () => {
      await this.checkForNewEpisodes();
    }, this.checkInterval);
    
    FirebaseLogger.info(`üîÑ Episode auto-check started (interval: ${this.checkInterval / 1000}s)`);
  }

  /**
   * D·ª´ng auto-check
   */
  stopAutoCheck() {
    if (this.autoCheckInterval) {
      clearInterval(this.autoCheckInterval);
      this.autoCheckInterval = null;
      FirebaseLogger.info('‚èπÔ∏è Episode auto-check stopped');
    }
  }

  /**
   * Ki·ªÉm tra th·ªß c√¥ng
   */
  async manualCheck() {
    FirebaseLogger.info('üîç Manual episode check triggered');
    return await this.checkForNewEpisodes();
  }

  /**
   * X√≥a phim kh·ªèi tracking
   */
  removeMovieFromTracking(slug) {
    if (this.trackedMovies.has(slug)) {
      this.trackedMovies.delete(slug);
      this.saveTrackedMovies();
      FirebaseLogger.debug(`‚ûñ Removed ${slug} from tracking`);
    }
  }

  /**
   * L·∫•y th·ªëng k√™
   */
  getStats() {
    return {
      trackedMoviesCount: this.trackedMovies.size,
      isAutoCheckRunning: !!this.autoCheckInterval,
      checkInterval: this.checkInterval,
      maxTrackedMovies: this.maxTrackedMovies
    };
  }

  /**
   * L·∫•y danh s√°ch phim ƒëang theo d√µi
   */
  getTrackedMovies() {
    return Array.from(this.trackedMovies.entries()).map(([slug, info]) => ({
      slug,
      ...info
    }));
  }
}

// Kh·ªüi t·∫°o global instance
window.NewEpisodeNotificationManager = new NewEpisodeNotificationManager();

// Auto-init khi DOM ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.NewEpisodeNotificationManager.init();
  });
} else {
  window.NewEpisodeNotificationManager.init();
}

export default NewEpisodeNotificationManager;
