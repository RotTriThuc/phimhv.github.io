/**
 * üì° Notification RSS Feed Generator
 * T·∫°o RSS feed cho th√¥ng b√°o phim m·ªõi v√† t·∫≠p m·ªõi
 * 
 * Features:
 * - Generate RSS XML t·ª´ notifications
 * - H·ªó tr·ª£ RSS 2.0 standard
 * - Auto-update RSS feed
 * - L·ªçc theo preferences c·ªßa user
 * - Cache RSS content
 */

import { FirebaseLogger } from '../firebase-config.js';

export class NotificationRSSGenerator {
  constructor() {
    this.rssCache = null;
    this.lastUpdate = null;
    this.cacheTimeout = 5 * 60 * 1000; // 5 ph√∫t
    this.maxItems = 50; // T·ªëi ƒëa 50 items trong RSS
  }

  /**
   * Kh·ªüi t·∫°o RSS generator
   */
  async init() {
    try {
      // ƒê·∫£m b·∫£o Firebase ƒë√£ s·∫µn s√†ng
      if (!window.movieComments || !window.movieComments.initialized) {
        await window.movieComments?.init();
      }

      // T·∫°o RSS endpoint
      this.setupRSSEndpoint();
      
      FirebaseLogger.info('üì° RSS Generator initialized');
      return true;

    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to initialize RSS Generator:', error);
      return false;
    }
  }

  /**
   * Setup RSS endpoint
   */
  setupRSSEndpoint() {
    // Th√™m link RSS v√†o head
    this.addRSSLink();
    
    // Expose RSS generator globally
    window.generateRSSFeed = this.generateRSSFeed.bind(this);
    window.getRSSContent = this.getRSSContent.bind(this);
  }

  /**
   * Th√™m RSS link v√†o HTML head
   */
  addRSSLink() {
    // Ki·ªÉm tra xem ƒë√£ c√≥ RSS link ch∆∞a
    if (document.querySelector('link[type="application/rss+xml"]')) return;

    const link = document.createElement('link');
    link.rel = 'alternate';
    link.type = 'application/rss+xml';
    link.title = 'Th√¥ng b√°o phim m·ªõi - Web Xem Anime';
    link.href = window.location.origin + '/rss.xml';
    
    document.head.appendChild(link);
  }

  /**
   * L·∫•y RSS content (cached ho·∫∑c generate m·ªõi)
   */
  async getRSSContent() {
    try {
      // Ki·ªÉm tra cache
      if (this.rssCache && this.lastUpdate) {
        const now = Date.now();
        if (now - this.lastUpdate < this.cacheTimeout) {
          FirebaseLogger.debug('üì° Returning cached RSS content');
          return this.rssCache;
        }
      }

      // Generate RSS m·ªõi
      const rssContent = await this.generateRSSFeed();
      
      // Cache content
      this.rssCache = rssContent;
      this.lastUpdate = Date.now();
      
      return rssContent;

    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to get RSS content:', error);
      return this.getErrorRSS();
    }
  }

  /**
   * Generate RSS feed t·ª´ notifications
   */
  async generateRSSFeed() {
    try {
      // L·∫•y notifications t·ª´ Firebase
      const notifications = await this.getNotificationsForRSS();
      
      // Generate RSS XML
      const rssXML = this.buildRSSXML(notifications);
      
      FirebaseLogger.info(`üì° Generated RSS feed with ${notifications.length} items`);
      return rssXML;

    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to generate RSS feed:', error);
      return this.getErrorRSS();
    }
  }

  /**
   * L·∫•y notifications cho RSS
   */
  async getNotificationsForRSS() {
    try {
      if (!window.movieComments?.getNotifications) {
        return [];
      }

      // L·∫•y notifications active, s·∫Øp x·∫øp theo th·ªùi gian
      const notifications = await window.movieComments.getNotifications({
        status: 'active',
        limit: this.maxItems,
        orderBy: 'createdAt',
        orderDirection: 'desc'
      });

      // L·ªçc ch·ªâ l·∫•y notifications v·ªÅ phim/t·∫≠p m·ªõi
      const filteredNotifications = notifications.filter(notification => 
        notification.type === 'new_movie' || 
        notification.type === 'new_episode' ||
        notification.type === 'admin_announcement'
      );

      return filteredNotifications;

    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to get notifications for RSS:', error);
      return [];
    }
  }

  /**
   * Build RSS XML t·ª´ notifications
   */
  buildRSSXML(notifications) {
    const siteUrl = window.location.origin;
    const now = new Date().toUTCString();
    
    const rssItems = notifications.map(notification => this.buildRSSItem(notification)).join('\n');

    return `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Th√¥ng b√°o phim m·ªõi - Web Xem Anime</title>
    <link>${siteUrl}</link>
    <description>C·∫≠p nh·∫≠t th√¥ng b√°o v·ªÅ phim m·ªõi v√† t·∫≠p m·ªõi tr√™n Web Xem Anime</description>
    <language>vi-VN</language>
    <lastBuildDate>${now}</lastBuildDate>
    <generator>Web Xem Anime RSS Generator</generator>
    <atom:link href="${siteUrl}/rss.xml" rel="self" type="application/rss+xml"/>
    
    ${rssItems}
  </channel>
</rss>`;
  }

  /**
   * Build RSS item t·ª´ notification
   */
  buildRSSItem(notification) {
    const siteUrl = window.location.origin;
    const pubDate = notification.createdAt ? 
      new Date(notification.createdAt).toUTCString() : 
      new Date().toUTCString();
    
    // T·∫°o link d·ª±a tr√™n lo·∫°i notification
    let link = siteUrl;
    let category = 'Th√¥ng b√°o';
    
    if (notification.type === 'new_movie' && notification.metadata?.movieSlug) {
      link = `${siteUrl}/#/phim/${notification.metadata.movieSlug}`;
      category = 'Phim m·ªõi';
    } else if (notification.type === 'new_episode' && notification.metadata?.movieSlug) {
      link = `${siteUrl}/#/xem/${notification.metadata.movieSlug}`;
      category = 'T·∫≠p m·ªõi';
    } else if (notification.type === 'admin_announcement') {
      category = 'Th√¥ng b√°o Admin';
    }

    // Escape XML characters
    const title = this.escapeXML(notification.title || 'Th√¥ng b√°o');
    const description = this.escapeXML(notification.content || '');
    const guid = `notification-${notification.id}`;

    return `    <item>
      <title>${title}</title>
      <link>${link}</link>
      <description><![CDATA[${description}]]></description>
      <category>${category}</category>
      <pubDate>${pubDate}</pubDate>
      <guid isPermaLink="false">${guid}</guid>
    </item>`;
  }

  /**
   * Escape XML characters
   */
  escapeXML(text) {
    if (!text) return '';
    
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }

  /**
   * Generate error RSS khi c√≥ l·ªói
   */
  getErrorRSS() {
    const siteUrl = window.location.origin;
    const now = new Date().toUTCString();

    return `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Th√¥ng b√°o phim m·ªõi - Web Xem Anime</title>
    <link>${siteUrl}</link>
    <description>C·∫≠p nh·∫≠t th√¥ng b√°o v·ªÅ phim m·ªõi v√† t·∫≠p m·ªõi tr√™n Web Xem Anime</description>
    <language>vi-VN</language>
    <lastBuildDate>${now}</lastBuildDate>
    
    <item>
      <title>L·ªói t·∫£i th√¥ng b√°o</title>
      <link>${siteUrl}</link>
      <description>Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o. Vui l√≤ng th·ª≠ l·∫°i sau.</description>
      <pubDate>${now}</pubDate>
      <guid isPermaLink="false">error-${Date.now()}</guid>
    </item>
  </channel>
</rss>`;
  }

  /**
   * T·∫°o RSS feed cho user c·ª• th·ªÉ (theo preferences)
   */
  async generatePersonalizedRSS(userId) {
    try {
      // Load user preferences
      let userPreferences = null;
      if (window.NotificationPreferencesManager) {
        await window.NotificationPreferencesManager.init();
        userPreferences = window.NotificationPreferencesManager.getPreferences();
      }

      // L·∫•y notifications
      const allNotifications = await this.getNotificationsForRSS();
      
      // L·ªçc theo preferences n·∫øu c√≥
      let filteredNotifications = allNotifications;
      if (userPreferences && window.NotificationPreferencesManager) {
        filteredNotifications = allNotifications.filter(notification => {
          if (notification.type === 'new_movie' && notification.metadata?.movieData) {
            return window.NotificationPreferencesManager.isInterestedInMovie(notification.metadata.movieData);
          }
          if (notification.type === 'new_episode' && notification.metadata?.movieData) {
            return window.NotificationPreferencesManager.isInterestedInEpisode(notification.metadata.movieData);
          }
          return true; // Lu√¥n hi·ªÉn th·ªã admin announcements
        });
      }

      return this.buildRSSXML(filteredNotifications);

    } catch (error) {
      FirebaseLogger.error('‚ùå Failed to generate personalized RSS:', error);
      return this.getErrorRSS();
    }
  }

  /**
   * T·∫°o RSS feed URL cho user
   */
  getRSSURL(personalized = false) {
    const baseUrl = window.location.origin;
    
    if (personalized && window.NotificationPreferencesManager) {
      const userId = window.NotificationPreferencesManager.userId;
      return `${baseUrl}/rss-${userId}.xml`;
    }
    
    return `${baseUrl}/rss.xml`;
  }

  /**
   * Th√™m RSS subscription button v√†o UI
   */
  addRSSSubscriptionButton() {
    // T√¨m notification actions container
    const actionsContainer = document.querySelector('.notification-actions');
    if (!actionsContainer) return;

    // Ki·ªÉm tra xem ƒë√£ c√≥ button ch∆∞a
    if (document.querySelector('.rss-button')) return;

    const button = document.createElement('button');
    button.className = 'preferences-button rss-button';
    button.innerHTML = 'üì° RSS';
    button.title = 'ƒêƒÉng k√Ω RSS feed';
    button.onclick = () => this.showRSSModal();

    actionsContainer.appendChild(button);
  }

  /**
   * Hi·ªÉn th·ªã modal RSS subscription
   */
  showRSSModal() {
    const rssUrl = this.getRSSURL();
    const personalizedUrl = this.getRSSURL(true);

    const modal = document.createElement('div');
    modal.className = 'preferences-modal open';
    modal.innerHTML = `
      <div class="preferences-content" style="max-width: 500px;">
        <div class="preferences-header">
          <h2>üì° RSS Feed</h2>
          <button class="preferences-close" onclick="this.closest('.preferences-modal').remove()">‚úï</button>
        </div>
        
        <div class="preferences-body">
          <div class="preference-section">
            <h3>üåê RSS Feed chung</h3>
            <p style="color: #ccc; font-size: 14px; margin-bottom: 10px;">
              T·∫•t c·∫£ th√¥ng b√°o phim m·ªõi v√† t·∫≠p m·ªõi
            </p>
            <div style="background: #2a2a2a; padding: 10px; border-radius: 6px; margin-bottom: 10px;">
              <code style="color: #6c5ce7; word-break: break-all;">${rssUrl}</code>
            </div>
            <button class="btn-action" onclick="navigator.clipboard.writeText('${rssUrl}'); this.textContent='‚úÖ ƒê√£ copy'">
              üìã Copy URL
            </button>
          </div>
          
          <div class="preference-section">
            <h3>üë§ RSS Feed c√° nh√¢n</h3>
            <p style="color: #ccc; font-size: 14px; margin-bottom: 10px;">
              Ch·ªâ th√¥ng b√°o theo s·ªü th√≠ch c·ªßa b·∫°n
            </p>
            <div style="background: #2a2a2a; padding: 10px; border-radius: 6px; margin-bottom: 10px;">
              <code style="color: #6c5ce7; word-break: break-all;">${personalizedUrl}</code>
            </div>
            <button class="btn-action" onclick="navigator.clipboard.writeText('${personalizedUrl}'); this.textContent='‚úÖ ƒê√£ copy'">
              üìã Copy URL
            </button>
          </div>
          
          <div class="preference-section">
            <h3>üì± C√°ch s·ª≠ d·ª•ng</h3>
            <ul style="color: #ccc; font-size: 13px; margin: 0; padding-left: 20px;">
              <li>Copy URL RSS feed</li>
              <li>M·ªü RSS reader (Feedly, Inoreader, ...)</li>
              <li>Th√™m feed m·ªõi v·ªõi URL ƒë√£ copy</li>
              <li>Nh·∫≠n th√¥ng b√°o t·ª± ƒë·ªông!</li>
            </ul>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);

    // Auto remove after 30 seconds
    setTimeout(() => {
      if (modal.parentNode) {
        modal.remove();
      }
    }, 30000);
  }

  /**
   * Clear cache
   */
  clearCache() {
    this.rssCache = null;
    this.lastUpdate = null;
    FirebaseLogger.info('üóëÔ∏è RSS cache cleared');
  }

  /**
   * Get cache stats
   */
  getCacheStats() {
    return {
      isCached: !!this.rssCache,
      lastUpdate: this.lastUpdate,
      cacheAge: this.lastUpdate ? Date.now() - this.lastUpdate : 0,
      cacheTimeout: this.cacheTimeout
    };
  }
}

// Kh·ªüi t·∫°o global instance
window.NotificationRSSGenerator = new NotificationRSSGenerator();

// Auto-init khi DOM ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.NotificationRSSGenerator.init();
  });
} else {
  window.NotificationRSSGenerator.init();
}

export default NotificationRSSGenerator;
